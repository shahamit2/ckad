Index: -
1. Objective
2. Single container
3. Multiple containers
4. Design Patterns
5. Sidecar
6. Adapter
7. Ambasaddor
8. Multicontainer Pods

******************************************************
1. Objective
- Learn
  - When to create pod with mulitple containers.
  - Design patters with respect to use case.

******************************************************
2. Single container
- Pod with Single Container
  - Easier to build, deploy, and debug.
  - Containers may have different life cycle.
  - Pod needs to scale up for one container only.
  - Containers do not want to share file system.

******************************************************
3. Multiple containers
- Pod with Mulitple Containers
  - Form a single cohesive unit of service
  - Containers share same life cycle
  - Containers must be on same node
  - Containers may share file system resource
  - Containers may want to communicate with each other
    - Simplified communication


******************************************************
4. Design Patterns
- Usecases to keep containers together forms design patterns
- Three design patterns
  - Sidecar
    - App + Logshipper
  - Adapter
    - App + LogFormatter
  - Ambassador
    - Proxy + App

******************************************************
5. Sidecar
- Two containers
  - Container1: App runs
  - Container2: Ships log generated by Container1.
- Common resource
  - Storage is common between both containers.
- Review files
  - codebase/images/fun
  - codebase/pod/sidecarpod.yaml

- Note
  - Here log shipping and transfer is not done.
  - Instead it is just displaying logs every 30 seconds.

- Build image on local machine
cd codebase/images/fun
docker build . -t amitshah/fun

- Run below commands to spinup two containers pod.
vagrant ssh kbs1
kubectl apply -f codebase/pod/sidecarpod.yaml
kubectl get pods -o wide
# After 1 minute run below commands
curl -XGET http://<Pod-IP>:4004
kubectl logs sidecarpod -c bb

******************************************************
6. Adapter
- Two containers
  - Container1: App runs
  - Container2: Format log generated by Container1.
- Common resource
  - Storage is common between both containers.
- Review files
  - codebase/images/fun
  - codebase/pod/adapterpod.yaml

- Note
  - Here all logs are capitalized.

- Run below commands to spinup two containers pod.
vagrant ssh kbs1
kubectl apply -f codebase/pod/adapterpod.yaml
kubectl get pods adapterpod -o wide
# After 1 minute run below commands
curl -XGET http://<Pod-IP>:4004
kubectl logs adapterpod -c bb

******************************************************
7. Ambasaddor
- Two containers
  - Container1: Main App
  - Container2: Proxy to Google.
- Common resource
  - Using network "localhost".
- Review files
  - codebase/images/proxy
  - codebase/images/main
  - codebase/pod/ambassadorpod.yaml

- Build image on local machine
cd codebase/images/proxy
docker build . -t amitshah/proxy

cd codebase/images/main
docker build . -t amitshah/main

- Run below commands to spinup two containers pod.
vagrant ssh kbs1
kubectl apply -f codebase/pod/ambassadorpod.yaml
kubectl get pods ambassadorpod -o wide
# After 1 minute run below commands
curl -XGET http://<Pod-IP>:6000
kubectl exec ambassadorpod -c main -it -- cat /var/output.txt

******************************************************
8. Multicontainer Pods
- Review file codebase/pod/multicon.yaml

- Run below command
vagrant ssh kbs1
kubectl apply -f codebase/pod/multicon.yaml
kubectl get pods

- Go inside each container
kubectl exec -it multicon -c nginx -it -- /bin/sh
kubectl exec -it multicon -c busybox -it -- /bin/sh

- Attach to each container
kubectl attach pod-multi -c nginx
kubectl attach pod-multi -c busybox